#!/bin/bash

set +e  # No exiting on first error
set -f  # No globbing

#-----------------------------------------------------------------------------

readonly program=$(basename $0)

#-----------------------------------------------------------------------------

error ()
{
    echo "$program: $*" >&2
    exit 1
}

#-----------------------------------------------------------------------------

getopt -T &>/dev/null

[ $? -eq 4 ] || error "getopt is too old"

#-----------------------------------------------------------------------------

getopt_result=$(eval $(tr -d '\n' <<END
getopt
 --name $program
 --options f:hl:
 --longoptions
 file-extension:,
help,
list-extension:
 --
 $*
END
)) || error "failed parsing options. Run $program -h for more information."

set -- $getopt_result

#-----------------------------------------------------------------------------

file_ext=.tst
help=false
list_ext=.lst

dirs=("$PWD")
globs=()

while true
do
    [ $# -gt 0 ] || error "internal error parsing arguments." \
              "getopt should return \"--\" at the end of its result."

    case "$1" in
    -f | --file-extension ) file_ext="$2" ; shift 2 ;;
    -h | --help           ) help=true     ; shift   ;;
    -l | --list-extension ) list_ext="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    *  )
         echo "$program: internal error parsing argument \"$1\"." \
              "getopt should check the options earlier." >&2

         exit 1
         ;;
    esac
done

#-----------------------------------------------------------------------------

while [ $# -gt 0 ]
do
    wo_single_quotes=$(eval echo "$1")

    if [ -d "$wo_single_quotes" ]
    then
        abs_path=$(cd "$wo_single_quotes" && /bin/pwd)
        dirs+=("$abs_path")
    else
        globs+=("$1")
    fi

    shift
done

#-----------------------------------------------------------------------------

declare -a tests_full_path tests_rel_path

for glob_pattern in "${globs[@]}"
do
    # Does not work without eval because getopt passes single quotes here
    tests_full_path+=($(eval find "${dirs[@]}" -iname "$glob_pattern" -type f))
done

for test in "${tests_full_path[@]}"
do
    tests_rel_path+=($(echo "$test" | sed -e "s:^$PWD/::"))
done

printf 'Globs    %s\n' "${globs[@]}"           | sort -u
printf 'Dirs     %s\n' "${dirs[@]}"            | sort -u
printf 'Full     %s\n' "${tests_full_path[@]}" | sort -u
printf 'Relative %s\n' "${tests_rel_path[@]}"  | sort -u

exit
